[1mdiff --git a/drivers/gpio/gpiolib-sysfs.c b/drivers/gpio/gpiolib-sysfs.c[m
[1mindex 4b44dd9..d559162 100644[m
[1m--- a/drivers/gpio/gpiolib-sysfs.c[m
[1m+++ b/drivers/gpio/gpiolib-sysfs.c[m
[36m@@ -96,28 +96,78 @@[m [mstatic ssize_t direction_store(struct device *dev,[m
 }[m
 static DEVICE_ATTR_RW(direction);[m
 [m
[32m+[m[32mu32 trustio_tz_call(long target_val);[m
[32m+[m[32mlong trustio_tz_read_call(void);[m
[32m+[m
[32m+[m[32mextern ktime_t trustio_sec_prot_start;[m
[32m+[m
[32m+[m[32mextern ktime_t trustio_ns_callback_start;[m
[32m+[m
[32m+[m[32mextern unsigned long trustio_sec_prot_ms_time;[m
[32m+[m
[32m+[m[32mextern unsigned long trustio_ns_cb_ms_time;[m
[32m+[m
[32m+[m[32mextern unsigned long trustio_sec_verify_ms_time;[m
[32m+[m
[32m+[m[32mextern long trustio_total_times;[m
[32m+[m
[32m+[m
 static ssize_t value_show(struct device *dev,[m
 		struct device_attribute *attr, char *buf)[m
 {[m
 	struct gpiod_data *data = dev_get_drvdata(dev);[m
 	struct gpio_desc *desc = data->desc;[m
 	ssize_t			status;[m
[32m+[m	[32mktime_t tend;[m
[32m+[m	[32munsigned long actual_time;[m
 [m
 	mutex_lock(&data->mutex);[m
[31m-[m
[31m-	status = sprintf(buf, "%d\n", gpiod_get_value_cansleep(desc));[m
[32m+[m[41m	[m
[32m+[m	[32munsigned int gpio_num;[m
[32m+[m	[32mgpio_num = desc_to_gpio(desc);[m
[32m+[m		[32m    //gpiod_set_value_cansleep(desc, value);[m
[32m+[m[41m		    [m
[32m+[m		[32m    if(gpio_num == 489) {[m
[32m+[m		[32m        // here call into TZ.[m
[32m+[m		[32m        //printk("Writing to TrustIO Val\n");[m
[32m+[m		[32m        trustio_sec_prot_start = ktime_get();[m
[32m+[m		[32m        gpio_num = trustio_tz_read_call();[m
[32m+[m		[32m        tend = ktime_get();[m
[32m+[m		[32m        actual_time = (unsigned long)ktime_to_ns(ktime_sub(tend, trustio_ns_callback_start));[m
[32m+[m[41m		        [m
[32m+[m		[32m        trustio_sec_verify_ms_time += actual_time;[m
[32m+[m		[32m        trustio_total_times++;[m
[32m+[m		[32m        if(trustio_total_times >= 2000) {[m
[32m+[m		[32m            printk("TRUSTIO: Secure Protection: %lu ns for %ld GPIO reads\n", trustio_sec_prot_ms_time, trustio_total_times);[m
[32m+[m		[32m            printk("TRUSTIO: NS CallBack: %lu ns for %ld GPIO reads\n", trustio_ns_cb_ms_time, trustio_total_times);[m
[32m+[m		[32m            printk("TRUSTIO: Secure Return: %lu ns for %ld GPIO reads\n", trustio_sec_verify_ms_time, trustio_total_times);[m
[32m+[m		[32m            trustio_total_times = 0;[m
[32m+[m		[32m            trustio_sec_prot_ms_time = 0;[m
[32m+[m		[32m            trustio_ns_cb_ms_time = 0;[m
[32m+[m		[32m            trustio_sec_verify_ms_time = 0;[m
[32m+[m		[32m        }[m
[32m+[m		[32m        status = sprintf(buf, "%u", gpio_num);[m
[32m+[m[41m		        [m
[32m+[m		[32m    } else {[m
[32m+[m
[32m+[m[41m        [m	[32mstatus = sprintf(buf, "%d\n", gpiod_get_value_cansleep(desc));[m
[32m+[m	[32m        }[m
 [m
 	mutex_unlock(&data->mutex);[m
 [m
 	return status;[m
 }[m
 [m
[32m+[m
[32m+[m
 static ssize_t value_store(struct device *dev,[m
 		struct device_attribute *attr, const char *buf, size_t size)[m
 {[m
 	struct gpiod_data *data = dev_get_drvdata(dev);[m
 	struct gpio_desc *desc = data->desc;[m
 	ssize_t			status;[m
[32m+[m	[32mktime_t tend;[m
[32m+[m	[32munsigned long actual_time;[m
 [m
 	mutex_lock(&data->mutex);[m
 [m
[36m@@ -128,7 +178,34 @@[m [mstatic ssize_t value_store(struct device *dev,[m
 [m
 		status = kstrtol(buf, 0, &value);[m
 		if (status == 0) {[m
[31m-			gpiod_set_value_cansleep(desc, value);[m
[32m+[m		[32m    //TODO: check GPIO number and make a call to TZ.[m
[32m+[m		[32m    // TRUSTIO CHECK[m
[32m+[m		[32m    long gpio_num = desc_to_gpio(desc);[m
[32m+[m		[32m    //gpiod_set_value_cansleep(desc, value);[m
[32m+[m[41m		    [m
[32m+[m		[32m    if(gpio_num == 489) {[m
[32m+[m		[32m        // here call into TZ.[m
[32m+[m		[32m        //printk("Writing to TrustIO Val\n");[m
[32m+[m		[32m        trustio_sec_prot_start = ktime_get();[m
[32m+[m		[32m        trustio_tz_call(value);[m
[32m+[m		[32m        tend = ktime_get();[m
[32m+[m		[32m        actual_time = (unsigned long)ktime_to_ns(ktime_sub(tend, trustio_ns_callback_start));[m
[32m+[m[41m		        [m
[32m+[m		[32m        trustio_sec_verify_ms_time += actual_time;[m
[32m+[m		[32m        trustio_total_times++;[m
[32m+[m		[32m        if(trustio_total_times >= 2000) {[m
[32m+[m		[32m            printk("TRUSTIO: Secure Protection: %lu ns for %ld GPIO writes\n", trustio_sec_prot_ms_time, trustio_total_times);[m
[32m+[m		[32m            printk("TRUSTIO: NS CallBack: %lu ns for %ld GPIO writes\n", trustio_ns_cb_ms_time, trustio_total_times);[m
[32m+[m		[32m            printk("TRUSTIO: Secure Return: %lu ns for %ld GPIO writes\n", trustio_sec_verify_ms_time, trustio_total_times);[m
[32m+[m		[32m            trustio_total_times = 0;[m
[32m+[m		[32m            trustio_sec_prot_ms_time = 0;[m
[32m+[m		[32m            trustio_ns_cb_ms_time = 0;[m
[32m+[m		[32m            trustio_sec_verify_ms_time = 0;[m
[32m+[m		[32m        }[m
[32m+[m		[32m        //printk("TRUSTIO: NON_SECURE TIME:%lld ns\n", actual_time);[m
[32m+[m		[32m    } else {[m
[32m+[m			[32m    gpiod_set_value_cansleep(desc, value);[m
[32m+[m			[32m}[m
 			status = size;[m
 		}[m
 	}[m
[1mdiff --git a/drivers/tee/optee/call.c b/drivers/tee/optee/call.c[m
[1mindex 97fad0e..a1bd53a 100644[m
[1m--- a/drivers/tee/optee/call.c[m
[1m+++ b/drivers/tee/optee/call.c[m
[36m@@ -106,7 +106,6 @@[m [mstatic struct optee_session *find_session(struct optee_context_data *ctxdata,[m
 [m
 	return NULL;[m
 }[m
[31m-[m
 /**[m
  * optee_do_call_with_arg() - Do an SMC to OP-TEE in secure world[m
  * @ctx:	calling context[m
[36m@@ -197,6 +196,147 @@[m [mstatic struct tee_shm *get_msg_arg(struct tee_context *ctx, size_t num_params,[m
 	return shm;[m
 }[m
 [m
[32m+[m
[32m+[m
[32m+[m[32mextern struct tee_device *trustio_glob_dev;[m
[32m+[m[32mextern struct tee_context *trustio_glob_ctx;[m
[32m+[m
[32m+[m[32m//TRUST_IO_CALL[m
[32m+[m[32mu32 trustio_tz_call(long target_val)[m
[32m+[m[32m{[m
[32m+[m	[32mstruct optee *optee = tee_get_drvdata(trustio_glob_dev);[m
[32m+[m	[32mstruct optee_call_waiter w;[m
[32m+[m	[32mstruct optee_rpc_param param = { };[m
[32m+[m	[32mstruct tee_shm *shm;[m
[32m+[m	[32mu32 ret;[m
[32m+[m[41m	[m
[32m+[m	[32mphys_addr_t msg_parg;[m
[32m+[m	[32mstruct optee_msg_arg *msg_arg;[m
[32m+[m	[32mstruct optee_msg_param *msg_param;[m
[32m+[m
[32m+[m	[32m/* +2 for the meta parameters added below */[m
[32m+[m	[32mshm = get_msg_arg(trustio_glob_ctx, 2, &msg_arg, &msg_parg);[m
[32m+[m	[32mif (IS_ERR(shm))[m
[32m+[m		[32mreturn PTR_ERR(shm);[m
[32m+[m
[32m+[m	[32mmsg_arg->cmd = OPTEE_MSG_CMD_TRUSTIO_GPIO;[m
[32m+[m	[32mmsg_arg->cancel_id = 0;[m
[32m+[m	[32mmsg_param = OPTEE_MSG_GET_PARAMS(msg_arg);[m
[32m+[m[41m	[m
[32m+[m	[32mmsg_param[0].u.value.a = target_val;[m
[32m+[m[41m	[m
[32m+[m
[32m+[m	[32mparam.a0 = OPTEE_SMC_CALL_WITH_ARG;[m
[32m+[m	[32mreg_pair_from_64(&param.a1, &param.a2, msg_parg);[m
[32m+[m	[32m/* Initialize waiter */[m
[32m+[m	[32moptee_cq_wait_init(&optee->call_queue, &w);[m
[32m+[m	[32mwhile (true) {[m
[32m+[m		[32mstruct arm_smccc_res res;[m
[32m+[m
[32m+[m		[32moptee->invoke_fn(param.a0, param.a1, param.a2, param.a3,[m
[32m+[m				[32m param.a4, param.a5, param.a6, param.a7,[m
[32m+[m				[32m &res);[m
[32m+[m
[32m+[m		[32mif (res.a0 == OPTEE_SMC_RETURN_ETHREAD_LIMIT) {[m
[32m+[m			[32m/*[m
[32m+[m			[32m * Out of threads in secure world, wait for a thread[m
[32m+[m			[32m * become available.[m
[32m+[m			[32m */[m
[32m+[m			[32moptee_cq_wait_for_completion(&optee->call_queue, &w);[m
[32m+[m		[32m} else if (OPTEE_SMC_RETURN_IS_RPC(res.a0)) {[m
[32m+[m			[32mparam.a0 = res.a0;[m
[32m+[m			[32mparam.a1 = res.a1;[m
[32m+[m			[32mparam.a2 = res.a2;[m
[32m+[m			[32mparam.a3 = res.a3;[m
[32m+[m			[32moptee_handle_rpc(trustio_glob_ctx, &param);[m
[32m+[m		[32m} else {[m
[32m+[m			[32mret = res.a0;[m
[32m+[m			[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/*[m
[32m+[m	[32m * We're done with our thread in secure world, if there's any[m
[32m+[m	[32m * thread waiters wake up one.[m
[32m+[m	[32m */[m
[32m+[m	[32moptee_cq_wait_final(&optee->call_queue, &w);[m
[32m+[m[32m    tee_shm_free(shm);[m
[32m+[m	[32mreturn ret;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_tz_call);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m//TRUST_IO_CALL[m
[32m+[m[32mlong trustio_tz_read_call(void)[m
[32m+[m[32m{[m
[32m+[m	[32mstruct optee *optee = tee_get_drvdata(trustio_glob_dev);[m
[32m+[m	[32mstruct optee_call_waiter w;[m
[32m+[m	[32mstruct optee_rpc_param param = { };[m
[32m+[m	[32mstruct tee_shm *shm;[m
[32m+[m	[32mu32 ret;[m
[32m+[m[41m	[m
[32m+[m	[32mphys_addr_t msg_parg;[m
[32m+[m	[32mstruct optee_msg_arg *msg_arg;[m
[32m+[m	[32mstruct optee_msg_param *msg_param;[m
[32m+[m
[32m+[m	[32m/* +2 for the meta parameters added below */[m
[32m+[m	[32mshm = get_msg_arg(trustio_glob_ctx, 2, &msg_arg, &msg_parg);[m
[32m+[m	[32mif (IS_ERR(shm))[m
[32m+[m		[32mreturn PTR_ERR(shm);[m
[32m+[m
[32m+[m	[32mmsg_arg->cmd = OPTEE_MSG_CMD_TRUSTIO_GPIO_READ;[m
[32m+[m	[32mmsg_arg->cancel_id = 0;[m
[32m+[m	[32mmsg_param = OPTEE_MSG_GET_PARAMS(msg_arg);[m
[32m+[m[41m	[m
[32m+[m	[32m//msg_param[0].u.value.a = target_val;[m
[32m+[m[41m	[m
[32m+[m
[32m+[m	[32mparam.a0 = OPTEE_SMC_CALL_WITH_ARG;[m
[32m+[m	[32mreg_pair_from_64(&param.a1, &param.a2, msg_parg);[m
[32m+[m	[32m/* Initialize waiter */[m
[32m+[m	[32moptee_cq_wait_init(&optee->call_queue, &w);[m
[32m+[m	[32mwhile (true) {[m
[32m+[m		[32mstruct arm_smccc_res res;[m
[32m+[m
[32m+[m		[32moptee->invoke_fn(param.a0, param.a1, param.a2, param.a3,[m
[32m+[m				[32m param.a4, param.a5, param.a6, param.a7,[m
[32m+[m				[32m &res);[m
[32m+[m[41m	    [m
[32m+[m
[32m+[m		[32mif (res.a0 == OPTEE_SMC_RETURN_ETHREAD_LIMIT) {[m
[32m+[m			[32m/*[m
[32m+[m			[32m * Out of threads in secure world, wait for a thread[m
[32m+[m			[32m * become available.[m
[32m+[m			[32m */[m
[32m+[m			[32moptee_cq_wait_for_completion(&optee->call_queue, &w);[m
[32m+[m		[32m} else if (OPTEE_SMC_RETURN_IS_RPC(res.a0)) {[m
[32m+[m			[32mparam.a0 = res.a0;[m
[32m+[m			[32mparam.a1 = res.a1;[m
[32m+[m			[32mparam.a2 = res.a2;[m
[32m+[m			[32mparam.a3 = res.a3;[m
[32m+[m			[32moptee_handle_rpc(trustio_glob_ctx, &param);[m
[32m+[m		[32m} else {[m
[32m+[m			[32mret = res.a0;[m
[32m+[m			[32mparam.a5 = res.a3;[m
[32m+[m			[32mbreak;[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/*[m
[32m+[m	[32m * We're done with our thread in secure world, if there's any[m
[32m+[m	[32m * thread waiters wake up one.[m
[32m+[m	[32m */[m
[32m+[m	[32moptee_cq_wait_final(&optee->call_queue, &w);[m
[32m+[m[32m    tee_shm_free(shm);[m
[32m+[m	[32mreturn (long)param.a5;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_tz_read_call);[m
[32m+[m
[32m+[m
[32m+[m
 int optee_open_session(struct tee_context *ctx,[m
 		       struct tee_ioctl_open_session_arg *arg,[m
 		       struct tee_param *param)[m
[1mdiff --git a/drivers/tee/optee/core.c b/drivers/tee/optee/core.c[m
[1mindex b4fe771..43e3aec 100644[m
[1m--- a/drivers/tee/optee/core.c[m
[1m+++ b/drivers/tee/optee/core.c[m
[36m@@ -29,6 +29,31 @@[m
 [m
 #define OPTEE_SHM_NUM_PRIV_PAGES	1[m
 [m
[32m+[m[32mstruct tee_device *trustio_glob_dev;[m
[32m+[m[32mstruct tee_context *trustio_glob_ctx;[m
[32m+[m[32mint is_trustio_glob_init = 0;[m
[32m+[m
[32m+[m[32mlong trustio_total_times = 0;[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_total_times);[m
[32m+[m
[32m+[m[32mktime_t trustio_sec_prot_start;[m
[32m+[m[32munsigned long trustio_sec_prot_ms_time =  0;[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_sec_prot_start);[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_sec_prot_ms_time);[m
[32m+[m
[32m+[m[32mktime_t trustio_ns_callback_start;[m
[32m+[m[32munsigned long trustio_ns_cb_ms_time = 0;[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_ns_callback_start);[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_ns_cb_ms_time);[m
[32m+[m
[32m+[m[32mktime_t trustio_sec_verify_start;[m
[32m+[m[32munsigned long trustio_sec_verify_ms_time = 0;[m
[32m+[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_sec_verify_start);[m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_sec_verify_ms_time);[m
 /**[m
  * optee_from_msg_param() - convert from OPTEE_MSG parameters to[m
  *			    struct tee_param[m
[36m@@ -199,6 +224,10 @@[m [mstatic int optee_open(struct tee_context *ctx)[m
 	INIT_LIST_HEAD(&ctxdata->sess_list);[m
 [m
 	ctx->data = ctxdata;[m
[32m+[m	[32mif(!is_trustio_glob_init) {[m
[32m+[m	[32m    is_trustio_glob_init = 1;[m
[32m+[m[41m    [m	[32moptee_open(trustio_glob_ctx);[m
[32m+[m	[32m}[m
 	return 0;[m
 }[m
 [m
[36m@@ -427,6 +456,7 @@[m [mstatic int get_invoke_func(struct device *dev, optee_invoke_fn **invoke_fn)[m
 	return 0;[m
 }[m
 [m
[32m+[m
 static int optee_probe(struct platform_device *pdev)[m
 {[m
 	optee_invoke_fn *invoke_fn;[m
[36m@@ -489,7 +519,7 @@[m [mstatic int optee_probe(struct platform_device *pdev)[m
 		goto err;[m
 	}[m
 	optee->supp_teedev = teedev;[m
[31m-[m
[32m+[m[41m	[m
 	rc = tee_device_register(optee->teedev);[m
 	if (rc)[m
 		goto err;[m
[36m@@ -510,6 +540,13 @@[m [mstatic int optee_probe(struct platform_device *pdev)[m
 	optee_enable_shm_cache(optee);[m
 [m
 	dev_info(&pdev->dev, "initialized driver\n");[m
[32m+[m[41m	[m
[32m+[m	[32mtrustio_glob_dev = teedev;[m
[32m+[m	[32mtrustio_glob_ctx = kzalloc(sizeof(*trustio_glob_ctx), GFP_KERNEL);[m
[32m+[m[41m	[m
[32m+[m	[32mtrustio_glob_ctx->teedev = teedev;[m
[32m+[m	[32mINIT_LIST_HEAD(&trustio_glob_ctx->list_shm);[m
[32m+[m[41m	[m
 	return 0;[m
 err:[m
 	if (optee) {[m
[36m@@ -528,6 +565,8 @@[m [mstatic int optee_probe(struct platform_device *pdev)[m
 	return rc;[m
 }[m
 [m
[32m+[m[32mEXPORT_SYMBOL_GPL(trustio_glob_dev);[m
[32m+[m
 static int optee_remove(struct platform_device *pdev)[m
 {[m
 	struct optee *optee = platform_get_drvdata(pdev);[m
[1mdiff --git a/drivers/tee/optee/optee_msg.h b/drivers/tee/optee/optee_msg.h[m
[1mindex 3c0a912..3afc29d 100644[m
[1m--- a/drivers/tee/optee/optee_msg.h[m
[1m+++ b/drivers/tee/optee/optee_msg.h[m
[36m@@ -329,6 +329,8 @@[m [mstruct optee_msg_arg {[m
 #define OPTEE_MSG_CMD_CANCEL		3[m
 #define OPTEE_MSG_CMD_REGISTER_SHM	4[m
 #define OPTEE_MSG_CMD_UNREGISTER_SHM	5[m
[32m+[m[32m#define OPTEE_MSG_CMD_TRUSTIO_GPIO    6[m
[32m+[m[32m#define OPTEE_MSG_CMD_TRUSTIO_GPIO_READ    7[m
 #define OPTEE_MSG_FUNCID_CALL_WITH_ARG	0x0004[m
 [m
 /*****************************************************************************[m
[1mdiff --git a/drivers/tee/optee/rpc.c b/drivers/tee/optee/rpc.c[m
[1mindex 0b9c1a2..4f6a420 100644[m
[1m--- a/drivers/tee/optee/rpc.c[m
[1m+++ b/drivers/tee/optee/rpc.c[m
[36m@@ -317,10 +317,20 @@[m [mstatic void handle_rpc_func_cmd_shm_free(struct tee_context *ctx,[m
 	arg->ret = TEEC_SUCCESS;[m
 }[m
 [m
[32m+[m[32mextern ktime_t trustio_sec_prot_start;[m
[32m+[m
[32m+[m[32mextern ktime_t trustio_ns_callback_start;[m
[32m+[m
[32m+[m[32mextern unsigned long trustio_sec_prot_ms_time;[m
[32m+[m
[32m+[m[32mextern unsigned long trustio_ns_cb_ms_time;[m
[32m+[m
 static void handle_rpc_func_cmd(struct tee_context *ctx, struct optee *optee,[m
 				struct tee_shm *shm)[m
 {[m
 	struct optee_msg_arg *arg;[m
[32m+[m	[32mktime_t tmpend;[m
[32m+[m	[32munsigned long actual_time;[m
 [m
 	arg = tee_shm_get_va(shm, 0);[m
 	if (IS_ERR(arg)) {[m
[36m@@ -346,7 +356,15 @@[m [mstatic void handle_rpc_func_cmd(struct tee_context *ctx, struct optee *optee,[m
 		handle_rpc_func_cmd_shm_free(ctx, arg);[m
 		break;[m
 	default:[m
[32m+[m	[32m    tmpend = ktime_get();[m
[32m+[m	[32m    actual_time = (unsigned long)ktime_to_ns(ktime_sub(tmpend, trustio_sec_prot_start));[m
[32m+[m	[32m    trustio_sec_prot_ms_time += actual_time;[m
[32m+[m[41m	    [m
 		handle_rpc_supp_cmd(ctx, arg);[m
[32m+[m		[32mtrustio_ns_callback_start = ktime_get();[m
[32m+[m		[32mactual_time = (unsigned long)ktime_to_ns(ktime_sub(trustio_ns_callback_start, tmpend));[m
[32m+[m		[32mtrustio_ns_cb_ms_time += actual_time;[m
[32m+[m[41m		[m
 	}[m
 }[m
 [m
